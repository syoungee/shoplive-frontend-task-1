{"version":3,"sources":["pages/MainPage.jsx","pages/EditPage.jsx","Router.jsx","index.js"],"names":["MainPage","navigate","useNavigate","useState","itemList","setItemList","inputData","setInputData","itemCount","setItemCount","useEffect","getItemLength","onChange","e","target","id","value","myData","localStorage","getItem","dataList","JSON","parse","length","className","placeholder","type","required","onClick","title","likeCount","imageUrl","temp_list","push","Date","valueOf","createdAt","setItem","stringify","list","console","log","saveData","map","item","style","backgroundImage","toLocaleString","state","toEditPage","EditPage","location","useLocation","action","size","defaultValue","index","editData","Router","basename","process","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9905e272.chunk.js","sourcesContent":["import './MainPage.scss';\nimport { useState, useEffect } from 'react';\nimport { DUMMY } from '../dummies';\nimport { useNavigate } from 'react-router-dom';\n\nconst MainPage = () => {\n  const navigate = useNavigate();\n  const [itemList, setItemList] = useState(null); // localStorage에 저장된 데이터\n  const [inputData, setInputData] = useState({}); // 입력한 데이터\n  const [searchItem, setSearchItem] = useState(null); // 검색할 데이터\n  const [itemCount, setItemCount] = useState(0);\n\n  useEffect(() => {\n    setItemCount(getItemLength());\n  }, []);\n\n  /* TODO 1. input값 가져오기 */\n  const onChange = (e) => {\n    setInputData({ ...inputData, [e.target.id]: e.target.value });\n  };\n\n  /* TODO 2. localStorage에 정보 저장 */\n  const saveData = () => {\n    // Validation check\n    if (!inputData.title || !inputData.likeCount || !inputData.imageUrl) {\n      console.log('모든 값을 입력해야합니다.');\n      return;\n    }\n\n    // localStorage에 새로운 데이터 저장\n    if (!localStorage.getItem('itemList')) {\n      let list = [{ ...inputData, id: new Date().valueOf(), createdAt: new Date().valueOf() }];\n      localStorage.setItem('itemList', JSON.stringify(list));\n    } else {\n      let temp_list = JSON.parse(localStorage.getItem('itemList'));\n      temp_list.push({ ...inputData, id: new Date().valueOf(), createdAt: new Date().valueOf() });\n      localStorage.setItem('itemList', JSON.stringify(temp_list));\n    }\n\n    // 아이템 갯수\n    setItemCount(getItemLength());\n  };\n\n  /* TODO 3. data length */\n\n  const getItemLength = () => {\n    const myData = localStorage.getItem('itemList');\n    const dataList = JSON.parse(myData);\n    setItemList(dataList);\n\n    return dataList?.length;\n  };\n\n  /* TODO 4. data 수정 및 삭제 */\n  const toEditPage = (item) => {\n    navigate(`/edit/${item.id}`, { state: { ...item } });\n  };\n  /* TODO 5. Refactoring */\n\n  return (\n    <div className=\"App\">\n      <header>SHOPLIVE</header>\n      <div className=\"input-rows\">\n        <div>\n          <input placeholder=\"검색\" />\n          <button>검색</button>\n        </div>\n        <div>\n          <input placeholder=\"title\" type=\"text\" onChange={(e) => onChange(e)} id=\"title\" required={true} />\n          <input placeholder=\"likeCount\" type=\"number\" onChange={(e) => onChange(e)} id=\"likeCount\" required={true} />\n          <input placeholder=\"imageUrl\" type=\"imgage\" onChange={(e) => onChange(e)} id=\"imageUrl\" required={true} />\n          <button onClick={(e) => saveData(e)}>추가</button>\n        </div>\n        <br />\n        <div>아이템 - 총 {itemCount} 개</div>\n        <br />\n      </div>\n      <div className=\"wrap-items\">\n        {\n          /* {itemList?.map((item) => (\n          <div key={item.id} className=\"item-row\">\n            <div style={{ backgroundImage: `url(` + item.imageUrl + `)` }} className=\"image\" />\n            <div className=\"likes\">LIKES♡ {item.likeCount}</div>\n            <div className=\"title\">\n              <b>{item.title}</b>\n              <br />\n              {new Date(item.createdAt).toLocaleString()}\n            </div>\n            <div className=\"button-row\">\n              <button className=\"button-modify\">수정</button>\n              <button className=\"button-remove\">제거</button>\n            </div>\n          </div>\n        ))} */\n          itemList?.map((item) => (\n            <div key={item.id} className=\"item-row\">\n              <div style={{ backgroundImage: `url(` + item.imageUrl + `)` }} className=\"image\" />\n              <div className=\"textfield\">\n                <div className=\"likes\">LIKES♡ {item.likeCount}</div>\n                <div className=\"title\">\n                  <b>{item.title}</b>\n                  <br />\n                  {new Date(item.createdAt).toLocaleString()}\n                </div>\n              </div>\n              <div className=\"button-row\">\n                <button\n                  className=\"button-modify\"\n                  onClick={() => {\n                    toEditPage(item);\n                  }}\n                >\n                  수정\n                </button>\n                <button className=\"button-remove\" onClick={() => {}}>\n                  제거\n                </button>\n              </div>\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import './EditPage.scss';\nimport { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst EditPage = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [inputData, setInputData] = useState({ ...location.state });\n\n  const onChange = (e) => {\n    setInputData({ ...inputData, [e.target.id]: e.target.value });\n  };\n\n  const editData = () => {\n    // Validation check\n    if (!inputData.title || !inputData.likeCount || !inputData.imageUrl) {\n      console.log('모든 값을 입력해야합니다.');\n      return;\n    }\n\n    // localStorage에 새로운 데이터 수정해서 저장\n    let temp_list = JSON.parse(localStorage.getItem('itemList'));\n    let target_id = -1;\n    temp_list.map((item, index) => {\n      if (item.id === inputData.id) {\n        temp_list[index] = inputData;\n        target_id = index;\n      }\n    });\n    // 수정 후 메인 페이지로 이동\n    localStorage.setItem('itemList', JSON.stringify(temp_list));\n    navigate(`/`);\n  };\n\n  return (\n    <div className=\"EditPage\">\n      <header>SHOPLIVE</header>\n      {console.log(inputData)}\n      <div key={inputData.id} className=\"item-row\">\n        <div style={{ backgroundImage: `url(` + inputData.imageUrl + `)` }} className=\"image\" />\n        <div className=\"textfield\">\n          <div className=\"likes\">LIKES♡ {inputData.likeCount}</div>\n          <div className=\"title\">\n            <b>{inputData.title}</b>\n            <br />\n            {new Date(inputData.createdAt).toLocaleString()}\n          </div>\n        </div>\n      </div>\n      <div className=\"submit-form\">\n        <form action=\"submit\">\n          title:\n          <input type=\"text\" id=\"title\" size=\"35\" defaultValue={inputData?.title ? inputData.title : ''} onChange={onChange} required={true} />\n          <br />\n          likes:\n          <input type=\"number\" id=\"likeCount\" defaultValue={inputData?.likeCount ? inputData.likeCount : ''} onChange={onChange} required={true} />\n          <br />\n          imageUrl:\n          <input type=\"url\" id=\"imageUrl\" size=\"70\" defaultValue={inputData?.imageUrl ? inputData.imageUrl : ''} onChange={onChange} required={true} />\n          <br />\n          <br />\n          <button\n            className=\"button-modify\"\n            onClick={() => {\n              editData();\n            }}\n          >\n            저장하기\n          </button>\n          <button\n            className=\"button-cancel\"\n            onClick={() => {\n              navigate(`/`);\n            }}\n          >\n            취소하기\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EditPage;\n","import { HashRouter, Routes, Route } from 'react-router-dom';\nimport MainPage from './pages/MainPage';\nimport EditPage from './pages/EditPage';\n\nconst Router = () => {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Routes>\n        <Route path=\"/\" element={<MainPage />} />\n        <Route path=\"/edit/:id\" element={<EditPage />} />\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}